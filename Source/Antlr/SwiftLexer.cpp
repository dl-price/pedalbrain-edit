
// Generated from Swift.g4 by ANTLR 4.6


#include "SwiftLexer.h"


using namespace antlr4;


SwiftLexer::SwiftLexer(CharStream *input) : Lexer(input) {
  _interpreter = new atn::LexerATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

SwiftLexer::~SwiftLexer() {
  delete _interpreter;
}

std::string SwiftLexer::getGrammarFileName() const {
  return "Swift.g4";
}

const std::vector<std::string>& SwiftLexer::getRuleNames() const {
  return _ruleNames;
}

const std::vector<std::string>& SwiftLexer::getModeNames() const {
  return _modeNames;
}

const std::vector<std::string>& SwiftLexer::getTokenNames() const {
  return _tokenNames;
}

dfa::Vocabulary& SwiftLexer::getVocabulary() const {
  return _vocabulary;
}

const std::vector<uint16_t> SwiftLexer::getSerializedATN() const {
  return _serializedATN;
}

const atn::ATN& SwiftLexer::getATN() const {
  return _atn;
}




// Static vars and initialization.
std::vector<dfa::DFA> SwiftLexer::_decisionToDFA;
atn::PredictionContextCache SwiftLexer::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN SwiftLexer::_atn;
std::vector<uint16_t> SwiftLexer::_serializedATN;

std::vector<std::string> SwiftLexer::_ruleNames = {
  "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "Identifier", 
  "Identifier_head", "Identifier_character", "Identifier_characters", "Decimal_literal", 
  "Pure_decimal_digits", "Decimal_digit", "Decimal_literal_character", "Decimal_literal_characters", 
  "WS"
};

std::vector<std::string> SwiftLexer::_modeNames = {
  "DEFAULT_MODE"
};

std::vector<std::string> SwiftLexer::_literalNames = {
  "", "';'", "'('", "')'", "'.'", "'-'", "'true'", "'false'", "'nil'"
};

std::vector<std::string> SwiftLexer::_symbolicNames = {
  "", "", "", "", "", "", "", "", "", "Identifier", "Decimal_literal", "Pure_decimal_digits", 
  "WS"
};

dfa::Vocabulary SwiftLexer::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> SwiftLexer::_tokenNames;

SwiftLexer::Initializer::Initializer() {
  // This code could be in a static initializer lambda, but VS doesn't allow access to private class members from there.
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  _serializedATN = {
    0x3, 0x430, 0xd6d1, 0x8206, 0xad2d, 0x4417, 0xaef1, 0x8d80, 0xaadd, 
    0x2, 0xe, 0x6e, 0x8, 0x1, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 
    0x4, 0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 0x9, 
    0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 0xa, 0x4, 
    0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 0x4, 0xe, 0x9, 
    0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 0x11, 0x9, 0x11, 
    0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x3, 0x2, 0x3, 0x2, 0x3, 
    0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x4, 0x3, 0x5, 0x3, 0x5, 0x3, 0x6, 0x3, 
    0x6, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x8, 0x3, 
    0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x9, 0x3, 0x9, 0x3, 
    0x9, 0x3, 0x9, 0x3, 0xa, 0x3, 0xa, 0x5, 0xa, 0x43, 0xa, 0xa, 0x3, 0xb, 
    0x5, 0xb, 0x46, 0xa, 0xb, 0x3, 0xc, 0x3, 0xc, 0x5, 0xc, 0x4a, 0xa, 0xc, 
    0x3, 0xd, 0x6, 0xd, 0x4d, 0xa, 0xd, 0xd, 0xd, 0xe, 0xd, 0x4e, 0x3, 0xe, 
    0x3, 0xe, 0x7, 0xe, 0x53, 0xa, 0xe, 0xc, 0xe, 0xe, 0xe, 0x56, 0xb, 0xe, 
    0x3, 0xf, 0x6, 0xf, 0x59, 0xa, 0xf, 0xd, 0xf, 0xe, 0xf, 0x5a, 0x3, 0x10, 
    0x3, 0x10, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x61, 0xa, 0x11, 0x3, 0x12, 
    0x6, 0x12, 0x64, 0xa, 0x12, 0xd, 0x12, 0xe, 0x12, 0x65, 0x3, 0x13, 0x6, 
    0x13, 0x69, 0xa, 0x13, 0xd, 0x13, 0xe, 0x13, 0x6a, 0x3, 0x13, 0x3, 0x13, 
    0x2, 0x2, 0x14, 0x3, 0x3, 0x5, 0x4, 0x7, 0x5, 0x9, 0x6, 0xb, 0x7, 0xd, 
    0x8, 0xf, 0x9, 0x11, 0xa, 0x13, 0xb, 0x15, 0x2, 0x17, 0x2, 0x19, 0x2, 
    0x1b, 0xc, 0x1d, 0xd, 0x1f, 0x2, 0x21, 0x2, 0x23, 0x2, 0x25, 0xe, 0x3, 
    0x2, 0x7, 0x25, 0x2, 0x43, 0x5c, 0x61, 0x61, 0x63, 0x7c, 0xaa, 0xaa, 
    0xac, 0xac, 0xaf, 0xaf, 0xb1, 0xb1, 0xb4, 0xb7, 0xb9, 0xbc, 0xbe, 0xc0, 
    0xc2, 0xd8, 0xda, 0xf8, 0xfa, 0x301, 0x372, 0x1681, 0x1683, 0x180f, 
    0x1811, 0x1dc1, 0x1e02, 0x2001, 0x200d, 0x200f, 0x202c, 0x2030, 0x2041, 
    0x2042, 0x2056, 0x2056, 0x2062, 0x20d1, 0x2102, 0x2191, 0x2462, 0x2501, 
    0x2778, 0x2795, 0x2c02, 0x2e01, 0x2e82, 0x3001, 0x3006, 0x3009, 0x3023, 
    0x3031, 0x3033, 0xd801, 0xf902, 0xfd3f, 0xfd42, 0xfdd1, 0xfdf2, 0xfe21, 
    0xfe32, 0xfe46, 0xfe49, 0xffff, 0x7, 0x2, 0x32, 0x3b, 0x302, 0x371, 
    0x1dc2, 0x1e01, 0x20d2, 0x2101, 0xfe22, 0xfe31, 0x3, 0x2, 0x32, 0x3b, 
    0x4, 0x2, 0x32, 0x3b, 0x61, 0x61, 0x5, 0x2, 0x2, 0x2, 0xb, 0xf, 0x22, 
    0x22, 0x6f, 0x2, 0x3, 0x3, 0x2, 0x2, 0x2, 0x2, 0x5, 0x3, 0x2, 0x2, 0x2, 
    0x2, 0x7, 0x3, 0x2, 0x2, 0x2, 0x2, 0x9, 0x3, 0x2, 0x2, 0x2, 0x2, 0xb, 
    0x3, 0x2, 0x2, 0x2, 0x2, 0xd, 0x3, 0x2, 0x2, 0x2, 0x2, 0xf, 0x3, 0x2, 
    0x2, 0x2, 0x2, 0x11, 0x3, 0x2, 0x2, 0x2, 0x2, 0x13, 0x3, 0x2, 0x2, 0x2, 
    0x2, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x2, 0x1d, 0x3, 0x2, 0x2, 0x2, 0x2, 0x25, 
    0x3, 0x2, 0x2, 0x2, 0x3, 0x27, 0x3, 0x2, 0x2, 0x2, 0x5, 0x29, 0x3, 0x2, 
    0x2, 0x2, 0x7, 0x2b, 0x3, 0x2, 0x2, 0x2, 0x9, 0x2d, 0x3, 0x2, 0x2, 0x2, 
    0xb, 0x2f, 0x3, 0x2, 0x2, 0x2, 0xd, 0x31, 0x3, 0x2, 0x2, 0x2, 0xf, 0x36, 
    0x3, 0x2, 0x2, 0x2, 0x11, 0x3c, 0x3, 0x2, 0x2, 0x2, 0x13, 0x40, 0x3, 
    0x2, 0x2, 0x2, 0x15, 0x45, 0x3, 0x2, 0x2, 0x2, 0x17, 0x49, 0x3, 0x2, 
    0x2, 0x2, 0x19, 0x4c, 0x3, 0x2, 0x2, 0x2, 0x1b, 0x50, 0x3, 0x2, 0x2, 
    0x2, 0x1d, 0x58, 0x3, 0x2, 0x2, 0x2, 0x1f, 0x5c, 0x3, 0x2, 0x2, 0x2, 
    0x21, 0x60, 0x3, 0x2, 0x2, 0x2, 0x23, 0x63, 0x3, 0x2, 0x2, 0x2, 0x25, 
    0x68, 0x3, 0x2, 0x2, 0x2, 0x27, 0x28, 0x7, 0x3d, 0x2, 0x2, 0x28, 0x4, 
    0x3, 0x2, 0x2, 0x2, 0x29, 0x2a, 0x7, 0x2a, 0x2, 0x2, 0x2a, 0x6, 0x3, 
    0x2, 0x2, 0x2, 0x2b, 0x2c, 0x7, 0x2b, 0x2, 0x2, 0x2c, 0x8, 0x3, 0x2, 
    0x2, 0x2, 0x2d, 0x2e, 0x7, 0x30, 0x2, 0x2, 0x2e, 0xa, 0x3, 0x2, 0x2, 
    0x2, 0x2f, 0x30, 0x7, 0x2f, 0x2, 0x2, 0x30, 0xc, 0x3, 0x2, 0x2, 0x2, 
    0x31, 0x32, 0x7, 0x76, 0x2, 0x2, 0x32, 0x33, 0x7, 0x74, 0x2, 0x2, 0x33, 
    0x34, 0x7, 0x77, 0x2, 0x2, 0x34, 0x35, 0x7, 0x67, 0x2, 0x2, 0x35, 0xe, 
    0x3, 0x2, 0x2, 0x2, 0x36, 0x37, 0x7, 0x68, 0x2, 0x2, 0x37, 0x38, 0x7, 
    0x63, 0x2, 0x2, 0x38, 0x39, 0x7, 0x6e, 0x2, 0x2, 0x39, 0x3a, 0x7, 0x75, 
    0x2, 0x2, 0x3a, 0x3b, 0x7, 0x67, 0x2, 0x2, 0x3b, 0x10, 0x3, 0x2, 0x2, 
    0x2, 0x3c, 0x3d, 0x7, 0x70, 0x2, 0x2, 0x3d, 0x3e, 0x7, 0x6b, 0x2, 0x2, 
    0x3e, 0x3f, 0x7, 0x6e, 0x2, 0x2, 0x3f, 0x12, 0x3, 0x2, 0x2, 0x2, 0x40, 
    0x42, 0x5, 0x15, 0xb, 0x2, 0x41, 0x43, 0x5, 0x19, 0xd, 0x2, 0x42, 0x41, 
    0x3, 0x2, 0x2, 0x2, 0x42, 0x43, 0x3, 0x2, 0x2, 0x2, 0x43, 0x14, 0x3, 
    0x2, 0x2, 0x2, 0x44, 0x46, 0x9, 0x2, 0x2, 0x2, 0x45, 0x44, 0x3, 0x2, 
    0x2, 0x2, 0x46, 0x16, 0x3, 0x2, 0x2, 0x2, 0x47, 0x4a, 0x9, 0x3, 0x2, 
    0x2, 0x48, 0x4a, 0x5, 0x15, 0xb, 0x2, 0x49, 0x47, 0x3, 0x2, 0x2, 0x2, 
    0x49, 0x48, 0x3, 0x2, 0x2, 0x2, 0x4a, 0x18, 0x3, 0x2, 0x2, 0x2, 0x4b, 
    0x4d, 0x5, 0x17, 0xc, 0x2, 0x4c, 0x4b, 0x3, 0x2, 0x2, 0x2, 0x4d, 0x4e, 
    0x3, 0x2, 0x2, 0x2, 0x4e, 0x4c, 0x3, 0x2, 0x2, 0x2, 0x4e, 0x4f, 0x3, 
    0x2, 0x2, 0x2, 0x4f, 0x1a, 0x3, 0x2, 0x2, 0x2, 0x50, 0x54, 0x9, 0x4, 
    0x2, 0x2, 0x51, 0x53, 0x9, 0x5, 0x2, 0x2, 0x52, 0x51, 0x3, 0x2, 0x2, 
    0x2, 0x53, 0x56, 0x3, 0x2, 0x2, 0x2, 0x54, 0x52, 0x3, 0x2, 0x2, 0x2, 
    0x54, 0x55, 0x3, 0x2, 0x2, 0x2, 0x55, 0x1c, 0x3, 0x2, 0x2, 0x2, 0x56, 
    0x54, 0x3, 0x2, 0x2, 0x2, 0x57, 0x59, 0x9, 0x4, 0x2, 0x2, 0x58, 0x57, 
    0x3, 0x2, 0x2, 0x2, 0x59, 0x5a, 0x3, 0x2, 0x2, 0x2, 0x5a, 0x58, 0x3, 
    0x2, 0x2, 0x2, 0x5a, 0x5b, 0x3, 0x2, 0x2, 0x2, 0x5b, 0x1e, 0x3, 0x2, 
    0x2, 0x2, 0x5c, 0x5d, 0x9, 0x4, 0x2, 0x2, 0x5d, 0x20, 0x3, 0x2, 0x2, 
    0x2, 0x5e, 0x61, 0x5, 0x1f, 0x10, 0x2, 0x5f, 0x61, 0x7, 0x61, 0x2, 0x2, 
    0x60, 0x5e, 0x3, 0x2, 0x2, 0x2, 0x60, 0x5f, 0x3, 0x2, 0x2, 0x2, 0x61, 
    0x22, 0x3, 0x2, 0x2, 0x2, 0x62, 0x64, 0x5, 0x21, 0x11, 0x2, 0x63, 0x62, 
    0x3, 0x2, 0x2, 0x2, 0x64, 0x65, 0x3, 0x2, 0x2, 0x2, 0x65, 0x63, 0x3, 
    0x2, 0x2, 0x2, 0x65, 0x66, 0x3, 0x2, 0x2, 0x2, 0x66, 0x24, 0x3, 0x2, 
    0x2, 0x2, 0x67, 0x69, 0x9, 0x6, 0x2, 0x2, 0x68, 0x67, 0x3, 0x2, 0x2, 
    0x2, 0x69, 0x6a, 0x3, 0x2, 0x2, 0x2, 0x6a, 0x68, 0x3, 0x2, 0x2, 0x2, 
    0x6a, 0x6b, 0x3, 0x2, 0x2, 0x2, 0x6b, 0x6c, 0x3, 0x2, 0x2, 0x2, 0x6c, 
    0x6d, 0x8, 0x13, 0x2, 0x2, 0x6d, 0x26, 0x3, 0x2, 0x2, 0x2, 0xc, 0x2, 
    0x42, 0x45, 0x49, 0x4e, 0x54, 0x5a, 0x60, 0x65, 0x6a, 0x3, 0x2, 0x3, 
    0x2, 
  };

  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

SwiftLexer::Initializer SwiftLexer::_init;
